{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"kyphosis","provenance":[],"collapsed_sections":[],"mount_file_id":"1dgLd2D1ziWJSZE_mpf_CuvzXbzvP_pyI","authorship_tag":"ABX9TyNE0pCHpAEWe9TtQRt9Fm4r"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n"],"metadata":{"id":"JgIla3Eoj7-b","executionInfo":{"status":"ok","timestamp":1657618759679,"user_tz":-330,"elapsed":385,"user":{"displayName":"Mithun Nath","userId":"01093248108661847497"}}},"execution_count":87,"outputs":[]},{"cell_type":"code","source":["kyphosis=pd.read_csv('/content/drive/MyDrive/Dataset/kyphosis.csv')"],"metadata":{"id":"aFz1xqnokKBT","executionInfo":{"status":"ok","timestamp":1657618760108,"user_tz":-330,"elapsed":20,"user":{"displayName":"Mithun Nath","userId":"01093248108661847497"}}},"execution_count":88,"outputs":[]},{"cell_type":"code","source":["kyphosis"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"B3DEsXTikKIL","executionInfo":{"status":"ok","timestamp":1657618760110,"user_tz":-330,"elapsed":20,"user":{"displayName":"Mithun Nath","userId":"01093248108661847497"}},"outputId":"9ec42e11-0b3b-41bd-84a8-52a5bda4e8ff"},"execution_count":89,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Kyphosis  Age  Number  Start\n","0    absent   71       3      5\n","1    absent  158       3     14\n","2   present  128       4      5\n","3    absent    2       5      1\n","4    absent    1       4     15\n","..      ...  ...     ...    ...\n","76  present  157       3     13\n","77   absent   26       7     13\n","78   absent  120       2     13\n","79  present   42       7      6\n","80   absent   36       4     13\n","\n","[81 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-f3dcaf92-f40b-489c-9a31-e17418145213\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Kyphosis</th>\n","      <th>Age</th>\n","      <th>Number</th>\n","      <th>Start</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>absent</td>\n","      <td>71</td>\n","      <td>3</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>absent</td>\n","      <td>158</td>\n","      <td>3</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>present</td>\n","      <td>128</td>\n","      <td>4</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>absent</td>\n","      <td>2</td>\n","      <td>5</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>absent</td>\n","      <td>1</td>\n","      <td>4</td>\n","      <td>15</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>76</th>\n","      <td>present</td>\n","      <td>157</td>\n","      <td>3</td>\n","      <td>13</td>\n","    </tr>\n","    <tr>\n","      <th>77</th>\n","      <td>absent</td>\n","      <td>26</td>\n","      <td>7</td>\n","      <td>13</td>\n","    </tr>\n","    <tr>\n","      <th>78</th>\n","      <td>absent</td>\n","      <td>120</td>\n","      <td>2</td>\n","      <td>13</td>\n","    </tr>\n","    <tr>\n","      <th>79</th>\n","      <td>present</td>\n","      <td>42</td>\n","      <td>7</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>80</th>\n","      <td>absent</td>\n","      <td>36</td>\n","      <td>4</td>\n","      <td>13</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>81 rows Ã— 4 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f3dcaf92-f40b-489c-9a31-e17418145213')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-f3dcaf92-f40b-489c-9a31-e17418145213 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-f3dcaf92-f40b-489c-9a31-e17418145213');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":89}]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ng9LVZi2wKZ0","executionInfo":{"status":"ok","timestamp":1657618763992,"user_tz":-330,"elapsed":3897,"user":{"displayName":"Mithun Nath","userId":"01093248108661847497"}},"outputId":"ef2c7a33-1acb-4b89-cc56-1bb6842c99e3"},"execution_count":90,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["x=kyphosis.drop('Kyphosis',axis=1)\n","y=kyphosis['Kyphosis']"],"metadata":{"id":"04OdqLQskKMV","executionInfo":{"status":"ok","timestamp":1657618763995,"user_tz":-330,"elapsed":29,"user":{"displayName":"Mithun Nath","userId":"01093248108661847497"}}},"execution_count":91,"outputs":[]},{"cell_type":"code","source":["sns.barplot(x='Kyphosis',y='Age',data=kyphosis)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":299},"id":"P3qwAiMBlB0O","executionInfo":{"status":"ok","timestamp":1657618763997,"user_tz":-330,"elapsed":29,"user":{"displayName":"Mithun Nath","userId":"01093248108661847497"}},"outputId":"f64007b6-d488-4d52-f192-633b7be136b9"},"execution_count":92,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f2baa836e10>"]},"metadata":{},"execution_count":92},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["# sns.pairplot('Kyphosis',hue='b',palette='Set1')"],"metadata":{"id":"xTG8GX9zkKPz","executionInfo":{"status":"ok","timestamp":1657618764000,"user_tz":-330,"elapsed":24,"user":{"displayName":"Mithun Nath","userId":"01093248108661847497"}}},"execution_count":93,"outputs":[]},{"cell_type":"code","source":["plt.figure(figsize=(25,7))\n","sns.countplot(x='Age',hue='Kyphosis',data=kyphosis,palette='Set1')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":403},"id":"HbMZSBxkkKT0","executionInfo":{"status":"ok","timestamp":1657618765418,"user_tz":-330,"elapsed":1441,"user":{"displayName":"Mithun Nath","userId":"01093248108661847497"}},"outputId":"4e4a6e45-472a-4131-dede-0374b2a2b04f"},"execution_count":94,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f2baa994510>"]},"metadata":{},"execution_count":94},{"output_type":"display_data","data":{"text/plain":["<Figure size 1800x504 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["\n","from sklearn.model_selection import train_test_split\n","x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=100)\n"],"metadata":{"id":"8SoqrUVBkKaU","executionInfo":{"status":"ok","timestamp":1657618765423,"user_tz":-330,"elapsed":66,"user":{"displayName":"Mithun Nath","userId":"01093248108661847497"}}},"execution_count":95,"outputs":[]},{"cell_type":"code","source":["x=kyphosis.drop('Kyphosis',axis=1)\n","y=kyphosis['Kyphosis']"],"metadata":{"id":"DG8EP9GakKiS","executionInfo":{"status":"ok","timestamp":1657618765424,"user_tz":-330,"elapsed":64,"user":{"displayName":"Mithun Nath","userId":"01093248108661847497"}}},"execution_count":96,"outputs":[]},{"cell_type":"code","source":["x.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"QxDxbSwLkKsp","executionInfo":{"status":"ok","timestamp":1657618765425,"user_tz":-330,"elapsed":62,"user":{"displayName":"Mithun Nath","userId":"01093248108661847497"}},"outputId":"2fee7e11-cc64-454e-dd99-7c6da02eeb71"},"execution_count":97,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Age  Number  Start\n","0   71       3      5\n","1  158       3     14\n","2  128       4      5\n","3    2       5      1\n","4    1       4     15"],"text/html":["\n","  <div id=\"df-12447dca-06fb-494e-b4bc-23fd9f5102cf\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Age</th>\n","      <th>Number</th>\n","      <th>Start</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>71</td>\n","      <td>3</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>158</td>\n","      <td>3</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>128</td>\n","      <td>4</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2</td>\n","      <td>5</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>4</td>\n","      <td>15</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-12447dca-06fb-494e-b4bc-23fd9f5102cf')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-12447dca-06fb-494e-b4bc-23fd9f5102cf button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-12447dca-06fb-494e-b4bc-23fd9f5102cf');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":97}]},{"cell_type":"code","source":["x=kyphosis.iloc[:,[1,2,3]].values"],"metadata":{"id":"JFCQobZgnoGo","executionInfo":{"status":"ok","timestamp":1657618765426,"user_tz":-330,"elapsed":56,"user":{"displayName":"Mithun Nath","userId":"01093248108661847497"}}},"execution_count":98,"outputs":[]},{"cell_type":"code","source":["y.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sZjTmTHVnoNN","executionInfo":{"status":"ok","timestamp":1657618765428,"user_tz":-330,"elapsed":55,"user":{"displayName":"Mithun Nath","userId":"01093248108661847497"}},"outputId":"3bc182b5-25c4-48a7-93d4-38dea86e6eb7"},"execution_count":99,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0     absent\n","1     absent\n","2    present\n","3     absent\n","4     absent\n","Name: Kyphosis, dtype: object"]},"metadata":{},"execution_count":99}]},{"cell_type":"code","source":["x_train,y_train,x_test,y_test=train_test_split(x,y,test_size=0.3,random_state=100)"],"metadata":{"id":"JAI6s2GAnoRQ","executionInfo":{"status":"ok","timestamp":1657618825399,"user_tz":-330,"elapsed":431,"user":{"displayName":"Mithun Nath","userId":"01093248108661847497"}}},"execution_count":107,"outputs":[]},{"cell_type":"code","source":["from sklearn.tree import DecisionTreeClassifier\n","dtree=DecisionTreeClassifier()\n","dtree.fit(x_train,y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":345},"id":"vIUS3-16noVq","executionInfo":{"status":"error","timestamp":1657618827008,"user_tz":-330,"elapsed":22,"user":{"displayName":"Mithun Nath","userId":"01093248108661847497"}},"outputId":"4456e775-56db-4f2d-eabb-1a905b6d0b44"},"execution_count":108,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-108-ea35014f659e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtree\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mDecisionTreeClassifier\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mdtree\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mDecisionTreeClassifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mdtree\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_train\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, check_input, X_idx_sorted)\u001b[0m\n\u001b[1;32m    940\u001b[0m             \u001b[0msample_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msample_weight\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    941\u001b[0m             \u001b[0mcheck_input\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcheck_input\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 942\u001b[0;31m             \u001b[0mX_idx_sorted\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mX_idx_sorted\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    943\u001b[0m         )\n\u001b[1;32m    944\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, check_input, X_idx_sorted)\u001b[0m\n\u001b[1;32m    299\u001b[0m             raise ValueError(\n\u001b[1;32m    300\u001b[0m                 \u001b[0;34m\"Number of labels=%d does not match number of samples=%d\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 301\u001b[0;31m                 \u001b[0;34m%\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_samples\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    302\u001b[0m             )\n\u001b[1;32m    303\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;36m0\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmin_weight_fraction_leaf\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0;36m0.5\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Number of labels=25 does not match number of samples=56"]}]},{"cell_type":"code","source":["predictions=dtree.predict(x_test)\n","predictions"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":328},"id":"PE95oE81noY9","executionInfo":{"status":"error","timestamp":1657618785758,"user_tz":-330,"elapsed":404,"user":{"displayName":"Mithun Nath","userId":"01093248108661847497"}},"outputId":"62d38965-b7ff-4a01-cc62-d4640e1af442"},"execution_count":103,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-103-141b38328074>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mpredictions\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtree\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mpredictions\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, X, check_input)\u001b[0m\n\u001b[1;32m    465\u001b[0m         \"\"\"\n\u001b[1;32m    466\u001b[0m         \u001b[0mcheck_is_fitted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 467\u001b[0;31m         \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_X_predict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcheck_input\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    468\u001b[0m         \u001b[0mproba\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtree_\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    469\u001b[0m         \u001b[0mn_samples\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py\u001b[0m in \u001b[0;36m_validate_X_predict\u001b[0;34m(self, X, check_input)\u001b[0m\n\u001b[1;32m    431\u001b[0m         \u001b[0;34m\"\"\"Validate the training data on predict (probabilities).\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    432\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcheck_input\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 433\u001b[0;31m             \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mDTYPE\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccept_sparse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"csr\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreset\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    434\u001b[0m             if issparse(X) and (\n\u001b[1;32m    435\u001b[0m                 \u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mintc\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindptr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mintc\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36m_validate_data\u001b[0;34m(self, X, y, reset, validate_separately, **check_params)\u001b[0m\n\u001b[1;32m    564\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Validation should be done on X, y or both.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    565\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mno_val_X\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mno_val_y\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 566\u001b[0;31m             \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    567\u001b[0m             \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    568\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mno_val_X\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mno_val_y\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator)\u001b[0m\n\u001b[1;32m    744\u001b[0m                     \u001b[0marray\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcasting\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"unsafe\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    745\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 746\u001b[0;31m                     \u001b[0marray\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    747\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mComplexWarning\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mcomplex_warning\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    748\u001b[0m                 raise ValueError(\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/series.py\u001b[0m in \u001b[0;36m__array__\u001b[0;34m(self, dtype)\u001b[0m\n\u001b[1;32m    855\u001b[0m               dtype='datetime64[ns]')\n\u001b[1;32m    856\u001b[0m         \"\"\"\n\u001b[0;32m--> 857\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_values\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    858\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    859\u001b[0m     \u001b[0;31m# ----------------------------------------------------------------------\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: could not convert string to float: 'absent'"]}]},{"cell_type":"code","source":["from sklearn.metrics import classification_report,confusion_matrix\n","print(classification_report(y_test,predictions))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"B5zFXG19kK1S","executionInfo":{"status":"ok","timestamp":1657618791383,"user_tz":-330,"elapsed":489,"user":{"displayName":"Mithun Nath","userId":"01093248108661847497"}},"outputId":"6b639903-d46e-4053-afc5-cd089fff47dc"},"execution_count":104,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","      absent       0.89      0.73      0.80        22\n","     present       0.14      0.33      0.20         3\n","\n","    accuracy                           0.68        25\n","   macro avg       0.52      0.53      0.50        25\n","weighted avg       0.80      0.68      0.73        25\n","\n"]}]},{"cell_type":"code","source":["print(confusion_matrix(y_test,predictions))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"g2nsrGakxHa1","executionInfo":{"status":"ok","timestamp":1657618795474,"user_tz":-330,"elapsed":16,"user":{"displayName":"Mithun Nath","userId":"01093248108661847497"}},"outputId":"d1aac7ae-88e9-473f-9d38-cec8d7ad3e9b"},"execution_count":105,"outputs":[{"output_type":"stream","name":"stdout","text":["[[16  6]\n"," [ 2  1]]\n"]}]},{"cell_type":"code","source":["from sklearn.ensemble import RandomForrestClassifier\n","rf=RandomForrestClassifier(n_estimators=100)\n","rf.fit(x_train,y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":339},"id":"nJz5Mlb_xHYB","executionInfo":{"status":"error","timestamp":1657619817976,"user_tz":-330,"elapsed":433,"user":{"displayName":"Mithun Nath","userId":"01093248108661847497"}},"outputId":"c37085ad-eeed-44d1-d03b-21fed3c9340b"},"execution_count":112,"outputs":[{"output_type":"error","ename":"ImportError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)","\u001b[0;32m<ipython-input-112-d17f28c02104>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensemble\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mRandomForrestClassifier\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mrf\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mRandomForrestClassifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_estimators\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mrf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_train\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mImportError\u001b[0m: cannot import name 'RandomForrestClassifier' from 'sklearn.ensemble' (/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/__init__.py)","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"],"errorDetails":{"actions":[{"action":"open_url","actionText":"Open Examples","url":"/notebooks/snippets/importing_libraries.ipynb"}]}}]},{"cell_type":"code","source":["rf_pred=dtree.predict(x_test)\n","rf_pred"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":328},"id":"OD043aYxxHQm","executionInfo":{"status":"error","timestamp":1657618929299,"user_tz":-330,"elapsed":22,"user":{"displayName":"Mithun Nath","userId":"01093248108661847497"}},"outputId":"09fe33fa-4699-4301-a33f-394dee382c8a"},"execution_count":111,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-111-700c531c9c43>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mrf_pred\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtree\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mrf_pred\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, X, check_input)\u001b[0m\n\u001b[1;32m    465\u001b[0m         \"\"\"\n\u001b[1;32m    466\u001b[0m         \u001b[0mcheck_is_fitted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 467\u001b[0;31m         \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_X_predict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcheck_input\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    468\u001b[0m         \u001b[0mproba\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtree_\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    469\u001b[0m         \u001b[0mn_samples\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py\u001b[0m in \u001b[0;36m_validate_X_predict\u001b[0;34m(self, X, check_input)\u001b[0m\n\u001b[1;32m    431\u001b[0m         \u001b[0;34m\"\"\"Validate the training data on predict (probabilities).\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    432\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcheck_input\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 433\u001b[0;31m             \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mDTYPE\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccept_sparse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"csr\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreset\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    434\u001b[0m             if issparse(X) and (\n\u001b[1;32m    435\u001b[0m                 \u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mintc\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindptr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mintc\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36m_validate_data\u001b[0;34m(self, X, y, reset, validate_separately, **check_params)\u001b[0m\n\u001b[1;32m    564\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Validation should be done on X, y or both.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    565\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mno_val_X\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mno_val_y\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 566\u001b[0;31m             \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    567\u001b[0m             \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    568\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mno_val_X\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mno_val_y\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator)\u001b[0m\n\u001b[1;32m    744\u001b[0m                     \u001b[0marray\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcasting\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"unsafe\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    745\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 746\u001b[0;31m                     \u001b[0marray\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    747\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mComplexWarning\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mcomplex_warning\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    748\u001b[0m                 raise ValueError(\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/series.py\u001b[0m in \u001b[0;36m__array__\u001b[0;34m(self, dtype)\u001b[0m\n\u001b[1;32m    855\u001b[0m               dtype='datetime64[ns]')\n\u001b[1;32m    856\u001b[0m         \"\"\"\n\u001b[0;32m--> 857\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_values\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    858\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    859\u001b[0m     \u001b[0;31m# ----------------------------------------------------------------------\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: could not convert string to float: 'absent'"]}]},{"cell_type":"code","source":["print(classification_report(y_test,rf_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":165},"id":"y8OoZ6hNxHJW","executionInfo":{"status":"error","timestamp":1657618922496,"user_tz":-330,"elapsed":658,"user":{"displayName":"Mithun Nath","userId":"01093248108661847497"}},"outputId":"3c71c5ef-a100-40ad-dd89-75c4381d46f3"},"execution_count":110,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-110-4c5b032d841c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mclassification_report\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mrf_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'rf_pred' is not defined"]}]}]}